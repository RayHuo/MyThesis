\chapter{预备知识}

本章主要介绍本文的背景工作，包括后续章节中所需的逻辑基础知识，提供一些已有结果和基本性质。第一节介绍经典的一阶逻辑和二阶逻辑，后面几节介绍本文所研究的非单调逻辑，包括一阶限定理论、稳定模型语义下的一阶理论，以及析取逻辑程序，同时也介绍了非单调逻辑之间的可译性研究背景。

\section{经典一阶逻辑和二阶逻辑}

\subsection{经典一阶逻辑}

与命题逻辑仅处理简单的陈述命题不同，一阶逻辑还额外包含了谓词、函词和量词。
一阶语言$\mathfrak{L}$是一阶逻辑使用的形式语言，\textmd{逻辑符号}通常包括量化符号$\forall$ 和$\exists$，逻辑联结词$\neg$、$\wedge$、$\vee$、$\rightarrow$、$\leftrightarrow$，等式符号$=$，个体变元符号，在本文中还使用符号$\top$表示“真”，$\bot$表示“假”。

常元包括谓词常元和函词常元，常元的元数是一个自然数，元数为0的谓词常元称为\textmd{命题常元}，元数为0 的函词常元称为\textmd{个体常元}。
任意给定一个只包含常元的符号集$v$，符号集为$v$的\textmd{项}（记为$L^{v}$-项）、\textmd{一阶公式}（记为$L^{v}$-公式）和\textmd{一阶语句}（记为$L^{v}$-语句）仍然递归的定义（在此省略）。称所有$L^{v}$-公式的集合为符号集为$v$的一阶语言，记为$L^{v}$。

范式是具有标准形式的公式，公式可以经过变换成为范式。在逻辑语言中，有两个重要的范式分别为合取范式（Conjunction Normal Form，简写为CNF）和析取范式（Disjunction Normal Form，简写为DNF）。合取范式是以析取子式为合取项的合取式，形如$(A_{11}~\vee~...~\vee~A_{1n_1})~\wedge~...~\wedge~(A_{i1}~\vee~...~\vee~A_{in_j})$，
析取范式是以合取子式为析取项的析取式，形如$(A_{11}~\wedge~...~\wedge~A_{1n_1})~\vee~...~\vee~(A_{i1}~\wedge~...~\wedge~A_{in_j})$。

称任一形如$Q_1x_1Q_2x_2\cdot\cdot\cdot Q_nx_n\varphi$的一阶公式为一个\textmd{前束范式}（Prenex Normal Form，简写为PNF），其中$Q_1,...,Q_n$ 是$\forall$或$\exists$，并且$\varphi$中不包含量词。前束范式是一阶逻辑中的范式，在一阶逻辑中，公式可以变换为何它等值的前束范式。在本文中，为了书写方便，将形如$Qx_1Qx_2\cdot\cdot\cdot Qx_n\varphi$的一阶公式缩写为$Q\bar{x}\varphi$，并称前缀$Q\bar{x}$为一个量词块，其中$Q$为量词$\forall$或$\exists$，$\bar{x}$表示上述个体变元的序列$x_1x_2...x_n$。给定一个自然数$n$，\textmd{$\Sigma_n$-公式}是一个前束范式的一阶公式，满足以存在量词块开始，共有$n$个量词块交替出现；对应的\textmd{$\Pi_n$-公式}是一个前束范式的一阶公式，满足以全称量词块开始，共有$n$个量词块交替出现。

文字是一个原子公式或者其否定式，文字可以分为正文字或负文字，正文字是一个原子，负文字即是原子的否定。
否定范式（Negative Normal Form，简写为NNF）也是经常见到的一种范式，它的由文字、$\wedge$、$\vee$、$\forall$和$\exists$构成，。


下面给出一阶逻辑的语义。
\begin{definition}
定义一个符号集为$v$的结构（简称为$v$-结构）$\mathfrak{A}$是具有如下属性的二元组$(A,a)$：
\begin{enumerate}
  \item $A$是一个非空集，称为$\mathfrak{A}$的论域；
  \item $a$是一个定义在$v$上的映射，且满足：
  \begin{enumerate}
    \item[(1)] 对于$v$上的任意$n$元谓词常元$P$，$a(P)$是$A$上的$n$元关系；
    \item[(2)] 对于$v$上的任意$n$元函数常元$f$，$a(f)$是$A$上的$n$元全函数。
  \end{enumerate}
\end{enumerate}
\end{definition}

结构$\mathfrak{A}$上的一个赋值是一个函数，该函数将所有个体变元映射为论域$A$内的元素，将所有$n$元谓词变元映射为$A$上的关系。

设$\varphi$是一个$v$-公式，$\alpha$是结构$\mathfrak{A}$上的一个赋值，若$\alpha$在$\mathfrak{A}$满足公式$\varphi$，记为$\mathfrak{A}\models\varphi[\alpha]$。特别地，如果$\varphi$是一个语句，$[\alpha]$可以舍去，称$\mathfrak{A}$是$\varphi$的一个模型（Model），换句话说，$\mathfrak{A}$满足$\varphi$。

\subsection{二阶逻辑}

二阶逻辑$\mathfrak{L}_{II}$是一阶逻辑的一个扩充，与一阶逻辑不同的是，一阶逻辑仅能量化个体，在二阶逻辑中又增加了可以量化任意元数的谓词和函词。
二阶语言$L_{II}^{v}$用于描述二阶逻辑的语言，设$v$ 是一个符号集，包含谓词符号、函词符号和常量，其逻辑符号相对于一阶逻辑增加了可数的\textmd{谓词变元}集合和可数的
\textmd{函词变元}集合。特别地，0元谓词变元称为\textmd{命题变元}，0元函词变元即为\textmd{个体变元}。

符号集为$v$的二阶项（记为$v$-二阶项）是在一阶定义中允许函词变元后得到的项，而其构成规则与函词常元的构成规则完全相同。符号集为$v$的二阶公式（记为$L_{II}^{v}$-公式）
是所有$L^{v}$-公式的构成规则，需将原构成规则的$v$- 项替换成$v$-二阶项，同时要有如下三个规则：
\begin{enumerate}
  \item 如果$X$是一个$n$元谓词变元，$t_0,...,t_{n-1}$是$v$-二阶项，则$X(t_0,...,t_{n-1})$ 是$L_{II}^{v}$-公式；
  \item 如果$\varphi$是一个$L_{II}^{v}$-公式且$X$是一个谓词变元，则$\exists X\varphi$和$\forall X\varphi$均是$L_{II}^{v}$-公式。
  \item 如果$\varphi$是一个$L_{II}^{v}$-公式且$h$是一个谓词变元，则$\exists h\varphi$和$\forall h\varphi$均是$L_{II}^{v}$-公式。
\end{enumerate}

二阶逻辑的语义定义建立在一阶逻辑语义的基础上。
%设$v$是一个符号集，$\mathfrak{A}$是一个$v$-结构，$\mathfrak{A}$上的一个\textmd{二阶赋值}是所有变元到论域上相应对象的一个映射，通过增加如下规则给出二阶逻辑$\mathfrak{L}_{II}$的满足关系：
此处不作详细介绍，具体参阅文献\cite{enderton2001mathematical}。

\section{一阶限定理论}


一阶限定理论研究\textmd{谓词外延}的\textsl{比较}，\textmd{谓词外延}的含义是在指定论域中，使得谓词为真的元素集合。下面介绍谓词的比较关系。对于任意具有相同元数的谓词$P$和$P^{*}$，
\begin{center}
\begin{tabular}{l}
$P^{*}~=~P$表示$\forall \bar{x}(P(\bar{x})~\leftrightarrow~P^{*}(\bar{x}))$，\\
$P^{*}~\leq~P$表示$\forall \bar{x}(P^{*}(\bar{x})~\rightarrow~P(\bar{x}))$，\\
$P^{*}~<~P$表示$(P^{*}~\leq~P)~\wedge~\neg(P^{*}~=~P)$，
\end{tabular}
\end{center}
其中$\bar{x}$是变元元组，$P^{*}~<~P$表示$P^{*}$的外延是$P$的外延的子集。

进一步，求解限定理论时，通常会有谓词集合的比较，设$\sigma$和$\sigma^{*}$都是谓词常元集，
且$|\sigma|~=~|\sigma^{*}|$，
\begin{center}
\begin{tabular}{l}
$\sigma^{*}~=\sigma$表示对于任意的$P~\in~\sigma$和$P^{*}~\in~\sigma^{*}$，满足$P^{*}~=~P$，\\
$\sigma^{*}~\leq\sigma$表示对于任意的$P~\in~\sigma$和$P^{*}~\in~\sigma^{*}$，满足$P^{*}~\leq~P$，\\
$\sigma^{*}~<\sigma$表示$(\sigma^{*}~\leq\sigma)~\wedge~\neg(\sigma^{*}~=\sigma)$，\\
\end{tabular}
\end{center}
其中$P^{*}$与$P$是一一对应的，且具有相同的元数。

设$\varphi$是一个一阶语句，$\sigma_i$是\textmd{极小}（minimized）谓词常元集，\textmd{可变}（varied）常元集$\sigma_v$是包含个体、函词或不在$\sigma_i$中出现的谓词常元集，
表示谓词常元不能同时是极小的和可变的，$\varphi$的符号集中剩余的
符号被称作\textmd{固定}（fixed）常元。一个限定理论是一个三元组$(\varphi;\sigma_i;\sigma_v)$，记为$\mathbf{CIRC}[\varphi;\sigma_i;\sigma_v]$，
如果$\varphi$是命题公式，则称为\textmd{命题限定理论}；如果$\varphi$是一阶语句，则称为\textmd{一阶限定理论}；如果$\sigma_v$为空，
则称为\textmd{标准限定理论}，可以简写为$\mathbf{CIRC}[\varphi;\sigma_i]$。

\begin{definition}
\textmd{并行限定}定义为如下一个二阶公式：
\begin{equation}\label{form_defcirc}
    \mathbf{CIRC}[\varphi;\sigma_i;\sigma_v]~=~\varphi~\wedge~\forall\sigma^{*}_i\sigma^{*}_v(\sigma^{*}_i~<~\sigma_i~\rightarrow~\neg\varphi(\sigma^{*}_i,\sigma^{*}_v))
\end{equation}
其中，$\sigma^{*}_i$是一个谓词变元集，这些谓词变元分别对应于$\sigma_i$中的谓词且常元具有相同的元数；类似地，$\sigma^{*}_v$是变元集，分别对应于$\sigma_v$中的常元，
且具有相同的元数；$\varphi(\sigma^{*}_i,\sigma^{*}_v)$是将公式$\varphi$中在$\sigma_i$（或$\sigma_v$）中出现的常元替换成对应的$\sigma^{*}_i$（或$\sigma^{*}_v$）中的变元。
\end{definition}

公式(\ref{form_defcirc})的直观含义是，满足公式$\varphi$正确的条件下，使得$\sigma_i$中谓词的外延最小，称这样的公式$\varphi$的模型为
$\mathbf{CIRC}[\varphi;\sigma_i;\sigma_v]$的模型。

令$v$为上述语句$\varphi$的符号集，设$\mathfrak{A}$ 和$\mathfrak{B}$是任意两个$v$-结构，
定义$\mathfrak{A}~\preceq_{\sigma_i,\sigma_v}~\mathfrak{B}$ 当且仅当以下条件成立：
\begin{enumerate}
  \item $\mathfrak{A}$与$\mathfrak{B}$具有相同的论域；
  \item 对于$v$中所有的极小谓词常元$P$，均有$\mathfrak{A}(P)~\subseteq~\mathfrak{B}(P)$；
  \item 对于$v$中所有固定的常元$C$，均有$\mathfrak{A}(C)~=~\mathfrak{B}(C)$。
\end{enumerate}
换句话说，$\mathfrak{A}~\preceq_{\sigma_i,\sigma_v}~\mathfrak{B}$ 意味着$\mathfrak{A}$和
$\mathfrak{B}$仅在解释$\sigma_i$和$\sigma_v$上不同。

关系$\preceq_{\sigma_i,\sigma_v}$具有自反律和传递律，令$\mathfrak{A}~\prec_{\sigma_i,\sigma_v}~\mathfrak{B}$
表示$\mathfrak{A}~\preceq_{\sigma_i,\sigma_v}~\mathfrak{B}$ 成立但是$\mathfrak{B}~\preceq_{\sigma_i,\sigma_v}~\mathfrak{A}$ 不成立，
如果结构$\mathfrak{A}$是语句$\varphi$的模型，且$\varphi$不存在模型$\mathfrak{B}$满足$\mathfrak{B}~\prec_{\sigma_i,\sigma_v}~\mathfrak{A}$。

设$\sigma_{i}$为一个谓词常量集合，将$\sigma_{i}$分割成若干不相交的段$\sigma_{i}^{1},...,\sigma_{i}^{k}$。
想使谓词$\sigma_{i}^{1}$极小化的优先级高于谓词$\sigma_{i}^{2}$，谓词$\sigma_{i}^{2}$极小化的优先级高于$\sigma_{i}^{3}$，
$\sigma_{i}^{m}$的优先级高于$\sigma_{i}^{n}$（$1\leq n<m\leq k$）。对于公式$\varphi$，$\sigma_v$为变化的谓词集，$\sigma_{i}^{1}>...>\sigma_{i}^{k}$为极小化谓词集的\textmd{优先级限定}记为$\mathbf{CIRC}[\varphi;\sigma_{i}^{1}>...>\sigma_{i}^{k};\sigma_v]$，
同样可以定义成与公式(\ref{form_defcirc})相似的二阶公式。
优先级限定与并行限定有如下的关系性质：

\begin{proposition}
\textbf{(文献\cite{lifschitz1994circumscription}命题15)}优先级限定$\mathbf{CIRC}[\varphi;\sigma_{i}^{1}>...>\sigma_{i}^{k};\sigma_v]$ 等价于并行限定
\begin{equation}\label{form_pri2par}
    \bigwedge^{k}_{j=1}\mathbf{CIRC}[\varphi;\sigma_{i}^j;\sigma_{i}^{j+1},...,\sigma_{i}^{k},\sigma_v].
\end{equation}
\end{proposition}

下面给出一个具体地例子介绍限定理论的相关概念。
\begin{example}\label{emp_pacifist}
(Reiter的例子，文献\cite{mccarthy1986applications} 第7节)设$\varphi$为如下一阶公式的全称闭包：
\begin{eqnarray}
% \nonumber to remove numbering (before each equation)
  Quaker(x)~\wedge~\neg Ab_1(x)~\rightarrow~Pacifist(x) \label{form_example1_1} \\
  Republican(x)~\wedge~\neg Ab_2(x)~\rightarrow~\neg Pacifist(x) \label{form_example1_2}
\end{eqnarray}
其中谓词$Quaker(x)$表示$x$是教徒，谓词$Republican(x)$表示$x$是共和党人，谓词$Pacifist(x)$ 表示$x$是和平主义者，谓词$Ab_1$表示一种不正常因素，谓词$Ab_2$表述另一种不正常因素。如果一个人$Nixon$同时是教徒和共和党人，对$Ab_1$和$Ab_2$限定，不能得到他是不是一个和平主义者，但是，如果使用优先级限定，则说明$Nixon$更像一个教徒而非共和党人，可以通过计算$\mathbf{CIRC}[\varphi;Ab_1>Ab_2;Pacifist]$得到$Nixon$是一个和平主义者。
\end{example}

\section{稳定模型语义}

本小节介绍稳定模型语义（Stable Model Semantics）下的一阶与命题理论。定义任意稳定模型语义是一个二元组$(\varphi; \sigma_{i})$，其中$\varphi$是一阶语句或者命题公式，$\sigma_{i}$是在$\varphi$中出现的谓词常元集合，这些谓词称为\textmd{内涵谓词常元}，除此之外的常元称为\textmd{外延常元}。

\begin{definition}
$SM[\varphi;\sigma_{i}]$定义为如下的二阶公式：
\begin{equation}\label{form_defsm}
    \varphi~\wedge~\forall \sigma^{*}_{i}(\sigma^{*}_{i}~<~\sigma_{i}~\rightarrow~\neg St(\varphi;\sigma_{i}))
\end{equation}
其中$St(\varphi;\sigma_{i})$递归地定义如下：
\begin{itemize}
  \item 如果$P~\in~\sigma_{i}$，则$\mathrm{St}(P(\overline{x});\sigma_i)~=~P^{*}(\overline{x})$；
  \item 如果谓词F不在$\sigma_i$中出现，则$\mathrm{St}(F(\overline{x});\sigma_i)~=~F(\overline{x})$；
  \item 如果$\circ~\in~\{\wedge,\vee\}$，则$\mathrm{St}(\psi~\circ~\chi;\sigma_i)~=~ \mathrm{St}(\psi;\sigma_i)~\circ~\mathrm{St}(\chi;\sigma_i)$；
  \item $\mathrm{St}(\psi~\rightarrow~\chi;\sigma_i)~=~ (\mathrm{St}(\psi;\sigma_i)~\rightarrow~\mathrm{St}(\chi;\sigma_i))~\wedge~(\psi~\rightarrow~\chi)$；
  \item 如果$Q~\in~\{\forall,\exists\}$，则$\mathrm{St}(Qx\psi;\sigma_i)~=~Qx\mathrm{St}(\psi;\sigma_i)$；
\end{itemize}
\end{definition}

如果结构$\mu$是$\mathbf{SM}[\varphi;\sigma_i]$的一个模型，则被称为$\varphi$的一个$\sigma_i$-稳定模型。令SM[FO]表示所有一阶稳定理论对应的二阶公式。

设$(\varphi,\sigma_i)$是一个稳定模型语义下的一阶逻辑，$v$为$\varphi$的符号集，则称一个$v$- 结构$\mathfrak{A}$是$\varphi$关于$\sigma_i$的\textmd{稳定模型}（Stable Model）当且仅当$\mathfrak{A}$是公式$\mathbf{SM}[\varphi,\sigma_i]$的模型。

稳定模型语义下前束范式的获取与经典语义等价关系有所不同，根据文献\cite{ferraris2011stable}，如果两个一阶公式$\varphi$和$\psi$是强等价的，当且仅当对于任意的公式$\gamma$以及任意一个谓词常元集$\sigma_i$，将公式$\varphi$在$\gamma$中的任意出现都替换成$\psi$后得到公式$\gamma'$，满足$\mathbf{SM}[\gamma;\gamma_i]$等价于$\mathbf{SM}[\gamma';\gamma_i]$。结合强等价的定义，有如下稳定稳定模型语义下的性质。
\begin{proposition}
\textbf{(文献\cite{pearce2005first}定理6.4)}设$\varphi$和$\psi$为任意的一阶公式，则下列等价关系成立：
\begin{align*}
  (1)~~&\forall x\varphi(x)~\wedge~\psi~\equiv~\forall x(\varphi(x)~\wedge~\psi) &(2)~~&\exists x\varphi(x)~\wedge~\psi~\equiv~\exists x(\varphi(x)~\wedge~\psi) \\
  (3)~~&\forall x\varphi(x)~\vee~\psi~\equiv~\forall x(\varphi(x)~\vee~\psi) &(4)~~&\exists x\varphi(x)~\vee~\psi~\equiv~\exists x(\varphi(x)~\vee~\psi) \\
  (5)~~&\exists x\varphi(x)~\rightarrow~\psi~\equiv~\forall x(\varphi(x)~\rightarrow~\psi) &(6)~~&\forall x\varphi(x)~\rightarrow~\psi~\equiv~\exists x(\varphi(x)~\rightarrow~\psi) \\
  (7)~~&\psi~\rightarrow~\forall x\varphi(x)~\equiv~\forall x(\psi~\rightarrow~\varphi(x)) &(8)~~&\psi~\rightarrow~\exists x\varphi(x)~\equiv~\exists x(\psi~\rightarrow~\varphi(x)) \\
  (9)~~&\neg\exists x\varphi(x)~\equiv~\forall x\neg\varphi(x) &(10)~~&\neg\forall x\varphi(x)~\equiv~\exists x\neg\varphi(x)
\end{align*}
其中个体变元$x$不在公式$\psi$中自由出现。
\end{proposition}



章衡\cite{zhang2011Decidability}在近几年的研究中提出了将稳定模型语义下一阶语句翻译成稳定模型语义下的全称一阶语句的方法，即消去了存在量词。该方法的主要思想如下定义：
\begin{definition}\label{def_smfo2smufo}
\textbf{(文献\cite{zhang2011Decidability}定义5.3)} 任意给定形如$\forall\bar{x}\exists\bar{y}\theta(\bar{x},\bar{y})$ 的一个一阶语句$\varphi$，我们定义$tr_{QE}(\varphi)$
为下述公式的合取式的一阶全称闭包：
\begin{eqnarray}
    \neg\neg S(\bar{x},\overline{min}) \\
    (\overline{succ}(\bar{y},\bar{z})~\wedge~S(\bar{x},\bar{z}))~\vee~\theta^{\neg\neg}(\bar{x},\bar{y})~\rightarrow~S(\bar{x},\bar{y}) \\
    T(\bar{x},\overline{min})~\vee~\theta(\bar{x},\overline{min}) \\
    \neg(\overline{succ}(\bar{y},\bar{z})~\wedge~S(\bar{x},\bar{z}))~\wedge~S(\bar{x},\bar{y})~\rightarrow~(T(\bar{x},\overline{max})~\leftrightarrow~\theta(\bar{x},\bar{y})) \\
    \overline{succ}(\bar{y},\bar{z})~\rightarrow~(T(\bar{x},\bar{y})~\leftrightarrow~\theta(\bar{x},\bar{z})~\vee~T(\bar{x},\bar{z}))
\end{eqnarray}

令$n$为序列$\bar{x}$与$\bar{y}$的长度之和，其中：
\begin{enumerate}
  \item $\theta^{\neg\neg}$是由$\theta$将所有原子公式$P(\bar{t})$替换为$\neg\neg P(\bar{t})$后得到的公式；
  \item $\overline{min}$和$\overline{max}$分别表示$n$元组$(min,...,min)$和$(max,...,max)$，$\overline{succ}$描述$succ$所定义序被推广到$n$元组后得到的后继关系；
  \item $S$和$T$是不在$\varphi$中出现的两个$n$ 元新谓词常元。
\end{enumerate}

对任意一个一阶稳定理论$(\varphi;\sigma)$，若$\varphi$是一个形如$\forall\bar{x}\exists\bar{y}\theta$的一阶语句，定义$Tr_{QE}(\mathbf{SM}[\varphi;\sigma])~=~\exists S\exists T\mathbf{SM}[tr_{QE}(\varphi);\sigma,S,T]$，
其中$S,T$是由$tr_{QE}$引入的辅助谓词。
\end{definition}

$Tr_{QE}$被证明在后继结构上保持等价关系。在这个存在量词消去的定义\ref{def_smfo2smufo}中，引入了三个具有后继结构的常元符号，分别为$min$、$max$和$succ$，$min$和$max$是个体常元，$succ$是谓词常元。参考文献\cite{zhang2011translating}给出后继结构的定义：
\begin{definition}\label{def_succ}
称一个结构$\mathfrak{A}$是一个后继结构当且仅当满足下面两个条件同时成立：
\begin{enumerate}
  \item $\mathfrak{A}$的符号集是一个后继符号集；
  \item 在关系$\mathfrak{A}(succ)$，论域中每一个元素至多有一个直接前继和一个直接后继，且无前继当且仅当该元素为$\mathfrak{A}(min)$，无后继当且仅当该元素为$\mathfrak{A}(max)$。
\end{enumerate}
\end{definition}

后继结构可以类比一个正整数结构$\mathbb{Z}_n$，其中$n~=~|\mathbb{Z}_n|$，例如集合$\{0,...,n-1\}$，$\mathfrak{A}(succ)$对应该集合上的后继关系，$\mathfrak{A}(min)$和$\mathfrak{A}(max)$分别对应$0$和$n-1$。
在后续的章节中，会使用到这一类后继结构，假定一般的公式符号集中不存在这三个常元符号。

章衡\cite{zhang2011translating}同样给出了一阶限定理论到一阶稳定理论的翻译，此翻译没有处理可变谓词的情形，但是给本文的研究提供了重要的翻译思路。
\begin{definition}
\textbf{(文献\cite{zhang2011Decidability}定义6.1)} 设$v$为谓词常元的一个有穷集，分情况进行如下定义：若$\varphi$为无蕴含否定范式，令$F_{\varphi}$为不在$\varphi$中出现的一个0元辅助谓词，令$\hat{tr}_{c2sm}^v(\varphi)$为如下公式：
\begin{eqnarray}
% \nonumber to remove numbering (before each equation)
  \varphi^{\neg\neg}~\wedge~\varphi^{-}~\wedge~F_{\varphi}~\rightarrow~\bigwedge_{Q\in v}\forall\bar{x}(Q(\bar{x})~\vee~\neg Q(\bar{x}))
\end{eqnarray}
其中：
\begin{enumerate}
  \item $\varphi^{\neg\neg}$为将$\varphi$中所有形如$P(\bar{t})$（$P~\in~v$）的公式替换为$\neg\neg P(\bar{t})$后所得的公式；
  \item $\varphi^{-}$为将$\varphi$中所有形如$\neg P(\bar{t})$（$P~\in~v$）的公式替换为$(P(\bar{t})\rightarrow F_{\varphi})$后所得的公式。
\end{enumerate}
\end{definition}

\begin{theorem}
$\hat{Tr}_{c2sm}$是从$\mathrm{CIRC}[FO]$到$\mathrm{SM}[FO]$保持一般结构上投影等价的翻译。
\end{theorem}

\section{析取逻辑程序}

逻辑程序是一种知识表示语言，一个逻辑程序是由多个\textmd{规则}组成，一个规则分为两部分：\textmd{头部}（$Head$）和\textmd{体部}（$Body$），如果体部不为空，使用符号$\leftarrow$将其区分：
\begin{align*}
    Head~\leftarrow~Body.
\end{align*}
如果体部为空，则可以省略符号$\leftarrow$。

一个\textmd{正规逻辑程序}（Normal Logic Program，记为LP[$\neg$]）由多个子句构成，子句形式为
\begin{equation}
    C~\leftarrow~L_1,...,L_k.
\end{equation}
其中头部$C$是正文字，体部$L_1,...,L_k(k\geq 0)$是文字。一个文字要么是一个原子（即正文字），要么是形如$\mathbf{not}~A$的公式，其中$A$ 是原子。

一个\textmd{标准析取逻辑程序}（Standard Disjunction Logic Program，记为DLP）由多个子句构成，子句形式为
\begin{equation}
    A_1~\vee~\cdot\cdot\cdot~\vee~A_k~\leftarrow~B_1,...,B_m.
\end{equation}
其中$k\geq 1,m\geq 0$，$A_i(1\leq i\leq k)$、$B_i(1\leq i\leq m)$都是原子。

一个\textmd{正规析取逻辑程序}（Normal Disjunction Logic Program，记为DLP[$\neg$]）由多个子句构成，子句形式为
\begin{equation}
    A_1~\vee~\cdot\cdot\cdot~\vee~A_k~\leftarrow~B_1,...,B_m,\mathbf{not}~C_1,...,\mathbf{not}~C_n.
\end{equation}
其中$k\geq 1,m\geq 0,n\geq 0$，$A_i(1\leq i\leq k)$、$B_i(1\leq i\leq m)$、$C_i(1\leq i\leq n)$都是原子。


一个\textmd{扩展析取逻辑程序}（Extended Disjunction Logic Program，记为DLP[$\neg\neg$]）由多个子句构成，子句中同时包含了经典的$\neg$和“否定即失败”的$\mathbf{not}$，子句形式为
\begin{equation}\label{form_dlpnn}
    A_1~\vee~\cdot\cdot\cdot~\vee~A_k~\leftarrow~B_1,...,B_m,\mathbf{not}~C_1,...,\mathbf{not}~C_n.
\end{equation}
其中$k\geq 1,m\geq 0,n\geq 0$，$A_i(1\leq i\leq k)$、$B_i(1\leq i\leq m)$、$C_i(1\leq i\leq n)$都是文字。

对于形如式(\ref{form_dlpnn})的规则，等价于如下一阶语句：
\begin{equation}
    \forall \bar{x}(B_1~\wedge~\cdot\cdot\cdot~\wedge B_m~\wedge~\neg C_1~\wedge~\cdot\cdot\cdot~\wedge~\neg C_n~\rightarrow~A_1~\vee~\cdot\cdot\cdot~\vee~A_k)
\end{equation}
其中$\bar{x}$是$A_i(1\leq i\leq k)$、$B_i(1\leq i\leq m)$、$C_i(1\leq i\leq n)$中出现的所有变元元组。这样一个逻辑程序等价一阶语句就是该程序所有规则对应的一阶语句的合取（因为逻辑程序中所有的语句都应成立，
所以所有的这些一阶表示语句应该是合取的关系）。

下面介绍逻辑程序的稳定模型语义，首先先介绍\textmd{$Herbrand$模型}。设$\Pi$为一个逻辑程序，包含的$\Pi$中所有常量的集合称为$\Pi$的\textmd{$Herbrand$域}（Herbrand universe），\textmd{常项}（ground term）是没有变量出现的项，因此\textmd{$Herbrand$域}包含了所有\textmd{常项}。一个\textmd{常原子}（ground atom）是一个谓词中仅出现常项的原子。\textmd{$Herbrand$基}（Herbrand base）是包含所有常原子的集合。设$\Pi$的一个\textmd{$Herbrand$解释}为$\mathfrak{I}$，该解释是取$\Pi$的$Herbrand$域为论域，将$\Pi$中的常项和常原子指派为它们自己，将$\Pi$中的谓词指派成$Herbrand$域中相同元数的关系，如果$\mathfrak{I}~\models~\Pi$，则$\mathfrak{I}$是$\Pi$的一个\textmd{$Herbrand$模型}（Herbrand model）。例如，逻辑程序$\Pi~=~\{p(1),q(2),q(x)\leftarrow p(x)\}$有两个$Herbrand$模型：
\begin{equation}\label{form_herbrandmodel1}
    \{p(1),q(1),q(2)\}
\end{equation}
和
\begin{equation}\label{form_herbrandmodel2}
    \{p(1),p(2),q(1),q(2)\}
\end{equation}
$\Pi$的一个$Herbrand$模型是极小的，当且仅当该模型的真子集都不是$\Pi$的$Herbrand$模型。上述例子中，(\ref{form_herbrandmodel1})是极小模型，而(\ref{form_herbrandmodel2})不是极小模型。
具体关于Herbrand理论可以参考文献\cite{ben2001mathematical}。
\begin{theorem}\label{thm_smsherbrand}
（\textbf{文献\cite{gelfond1988stable}定理1}）设$\Pi$为一个逻辑程序，$\Pi$的任意一个稳定模型都是$\Pi$的一个极小$Herbrand$模型。
\end{theorem}

定理\ref{thm_smsherbrand}给出了逻辑程序的稳定语义，$\Pi$的符号集为$v$，一个结构$\mathfrak{A}$是$\Pi$关于$v$的一个稳定模型当且仅当$\mathfrak{A}$是$\textbf{SM}[\Pi;v]$的模型。


在文献\cite{cabalar2005reducing}中，Cabalar等人给出了从任意全称稳定理论转化为析取逻辑程序的方法，主要包括两个
转换规则集，为了不失一般性，在规则集中所有的蕴含式都先被转换成稳定语义下的否定范式。有如下将否定前缀向内移动，直到变成NNF的规则：
\begin{align*}
% \nonumber to remove numbering (before each equation)
  \neg \top ~~&\Longleftrightarrow~~ \bot &(\mathrm{N1})&&
  \neg \bot ~~&\Longleftrightarrow~~ \top &(\mathrm{N2}) \\
  \neg\neg\neg\varphi ~~&\Longleftrightarrow~~ \neg\varphi &(\mathrm{N3})&&
  \neg(\varphi~\wedge~\psi) ~~&\Longleftrightarrow~~ \neg\varphi~\vee~\neg\psi &(\mathrm{N4}) \\
  \neg(\varphi~\vee~\psi) ~~&\Longleftrightarrow~~ \neg\varphi~\wedge~\neg\psi &(\mathrm{N5})&&
  \neg(\varphi~\rightarrow~\psi) ~~&\Longleftrightarrow~~ \neg\neg\varphi~\wedge~\neg\psi &(\mathrm{N6})
\end{align*}


下面我们列出两个主要的规则集，在下面的规则表示中，我们将$\alpha$看成合取式，$\beta$看成析取式（如果不是，就把他们当成
$\alpha~\wedge~\top$，$\beta~\vee~\bot$）。

左规则：
\begin{align*}
% \nonumber to remove numbering (before each equation)
  \top~\wedge~\alpha~\rightarrow~\beta ~~&\Longleftrightarrow~~ {~\alpha~\rightarrow~\beta~} \tag{L1} \\
  \bot~\wedge~\alpha~\rightarrow~\beta ~~&\Longleftrightarrow~~ \emptyset \tag{L2} \\
  \neg\neg\varphi~\wedge~\alpha~\rightarrow~\beta ~~&\Longleftrightarrow~~ {~\alpha~\rightarrow~\neg\varphi~\vee~\beta~} \tag{L3} \\
  (\varphi~\vee~\psi)~\wedge~\alpha~\rightarrow~\beta ~~&\Longleftrightarrow~~ \left\{
        \begin{array}{rll}
            \varphi~\wedge~\alpha~&\rightarrow~\beta \\
            \psi~\wedge~\alpha~&\rightarrow~\beta
        \end{array}
    \right\} \tag{L4} \\
  (\varphi~\rightarrow~\psi)~\wedge~\alpha~\rightarrow~\beta ~~&\Longleftrightarrow~~ \left\{
        \begin{array}{rll}
            \neg\varphi~\wedge~\alpha~&\rightarrow~\beta \\
            \psi~\wedge~\alpha~&\rightarrow~\beta \\
            \alpha~&\rightarrow~\varphi~\vee~\neg\psi~\vee~\beta
        \end{array}
    \right\} \tag{L5}
\end{align*}

右规则：
\begin{align*}
% \nonumber to remove numbering (before each equation)
  \alpha~\rightarrow~\bot~\vee~\beta ~~&\Longleftrightarrow~~ {\alpha~\rightarrow~\beta} \tag{R1} \\
  \alpha~\rightarrow~\top~\vee~\beta ~~&\Longleftrightarrow~~ \emptyset \tag{R2} \\
  \alpha~\rightarrow~\neg\neg\varphi~\vee~\beta ~~&\Longleftrightarrow~~ {\neg\varphi~\wedge~\alpha~\rightarrow~\beta} \tag{R3} \\
  \alpha~\rightarrow~(\varphi~\wedge~\psi)~\vee~\beta ~~&\Longleftrightarrow~~ \left\{
        \begin{array}{rll}
            \alpha~&\rightarrow~\varphi~\vee~\beta \\
            \alpha~&\rightarrow~\psi~\vee~\beta
        \end{array}
    \right\} \tag{R4} \\
  \alpha~\rightarrow~(\varphi~\rightarrow~\psi)~\vee~\beta ~~&\Longleftrightarrow~~ \left\{
        \begin{array}{rll}
            \varphi~\wedge~\alpha~&\rightarrow~\psi~\vee~\beta \\
            \neg\psi~\wedge~\alpha~&\rightarrow~\neg\varphi~\vee~\beta
        \end{array}
    \right\} \tag{R5}
\end{align*}

对于规则(R5)，当$\beta~=~\bot$时，会发现第二条规则遵从第一条规则，因此，可以有一个特殊的版本如下：
\begin{equation}
    \alpha~\rightarrow~(\varphi~\rightarrow~\psi)~\Longleftrightarrow~{~\varphi~\wedge~\alpha~\rightarrow~\psi~} \tag{R5'}
\end{equation}

回答集程序（Answer Set Programming，简写为ASP）是基于稳定模型语义的逻辑程序，使用陈述语句编写的形式，用于求解较难（主要是NP-难问题）的搜索问题。最近几年，随着回答集求解器的出现，答集程序在知识表示方面发展成为了一个可行方案，目前较为流行的回答集求解器有ClaspD\cite{gebser2007conflict}、DLV\cite{leone2006dlv}、GnT\cite{janhunen2006unfolding}
和Smodels\cite{niemela1997smodels}。
%Recently, with the emergence of answer set solvers such asdlv[19], GnT [15],
%andsmodels [36], answer set programming (ASP) is developing as a prac-tical and viable environment for knowledge representation and declarative
%problem solving. Applications in artificial intelligence include planning and
%diagnosis [2],
%clark's completion

